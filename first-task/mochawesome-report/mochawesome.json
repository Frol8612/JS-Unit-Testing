{
  "stats": {
    "suites": 7,
    "tests": 146,
    "passes": 146,
    "pending": 0,
    "failures": 0,
    "start": "2019-08-04T20:21:20.051Z",
    "end": "2019-08-04T20:21:40.586Z",
    "duration": 20535,
    "testsRegistered": 146,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a8136784-76e0-40c7-a80b-9c85e75dbac0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
          "title": "convert to miles",
          "fullFile": "D:\\Web\\Git\\JS-Unit-Testing\\first-task\\src\\LengthConverte.test.js",
          "file": "\\src\\LengthConverte.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 1 when the value 160934.4 and unit of measurement cm",
              "fullTitle": "convert to miles should return 1 when the value 160934.4 and unit of measurement cm",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "4e719f49-db54-41cc-b1fb-1dc6f205ecc3",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 1609.344 and unit of measurement m",
              "fullTitle": "convert to miles should return 1 when the value 1609.344 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "fe8b01f1-7d83-4d81-9e1f-2d8d2118b438",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 1 and unit of measurement miles",
              "fullTitle": "convert to miles should return 1 when the value 1 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "13fd10f2-4e76-450f-b2dd-bc270f594572",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 0.8688097306689835 and unit of measurement sea miles",
              "fullTitle": "convert to miles should return 1 when the value 0.8688097306689835 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "8a964145-213f-4034-ba86-32c294f0457c",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 63360 and unit of measurement inches",
              "fullTitle": "convert to miles should return 1 when the value 63360 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "c9a09e30-4795-42e9-b7db-a1cc5b4b8d50",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 5280 and unit of measurement foot",
              "fullTitle": "convert to miles should return 1 when the value 5280 and unit of measurement foot",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "a7ddeb7d-6b2a-4912-8829-a9ef7630e6f4",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement cm",
              "fullTitle": "convert to miles should return 0 when the value 0 and unit of measurement cm",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "d04a128e-ed88-47a1-8832-7c2747afa08c",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement m",
              "fullTitle": "convert to miles should return 0 when the value 0 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "0d47a0f6-2a69-4cc7-9940-12460e77e462",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement miles",
              "fullTitle": "convert to miles should return 0 when the value 0 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "b6c5b09b-dfcd-45c7-b2d4-4e629d55933d",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement sea miles",
              "fullTitle": "convert to miles should return 0 when the value 0 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "69c63fa4-8d6b-4340-a254-c5a0f1d08249",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement inches",
              "fullTitle": "convert to miles should return 0 when the value 0 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "951fae8c-52d0-4ac6-a5a0-ea796bf6bdd1",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement foot",
              "fullTitle": "convert to miles should return 0 when the value 0 and unit of measurement foot",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "2441fb3c-900b-43bc-91d3-d9de66ef19cc",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter string",
              "fullTitle": "convert to miles should return error when first parameter string",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "7d4d1b09-2e40-4e7d-be5b-7bb9884caa1f",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter boolean",
              "fullTitle": "convert to miles should return error when first parameter boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "9bf66677-0ea8-48da-80a9-1c8efe5db0c3",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter null",
              "fullTitle": "convert to miles should return error when first parameter null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "66c09c25-0715-4cda-884a-8c1ba48eda25",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter undefined",
              "fullTitle": "convert to miles should return error when first parameter undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "e282aa66-d8a4-4fea-8491-be7c271257d9",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter a negative number",
              "fullTitle": "convert to miles should return error when first parameter a negative number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "b01b2604-5736-4191-a11f-3bf26bf443c1",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter string",
              "fullTitle": "convert to miles should return error when second parameter string",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "1aedbb2f-6637-403f-9538-0b953bbac5a1",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter number",
              "fullTitle": "convert to miles should return error when second parameter number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "cf7479ec-41d5-4dd9-9235-4d3e8ec1c602",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter boolean",
              "fullTitle": "convert to miles should return error when second parameter boolean",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "00dd22c9-4bfa-47b7-a573-9ce5903aaaa3",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter null",
              "fullTitle": "convert to miles should return error when second parameter null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "cc334233-3e68-44cb-ae7f-ae10d3fac0ac",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter undefined",
              "fullTitle": "convert to miles should return error when second parameter undefined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "b1b84226-7dc6-4a9f-8ce2-7ae053ac85fb",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter empty string",
              "fullTitle": "convert to miles should return error when second parameter empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "4f6911e3-4b73-4668-ab2e-601ace0c7b2c",
              "parentUUID": "3eb43f0a-ccf7-4bc3-93b4-0b41f08b794e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4e719f49-db54-41cc-b1fb-1dc6f205ecc3",
            "fe8b01f1-7d83-4d81-9e1f-2d8d2118b438",
            "13fd10f2-4e76-450f-b2dd-bc270f594572",
            "8a964145-213f-4034-ba86-32c294f0457c",
            "c9a09e30-4795-42e9-b7db-a1cc5b4b8d50",
            "a7ddeb7d-6b2a-4912-8829-a9ef7630e6f4",
            "d04a128e-ed88-47a1-8832-7c2747afa08c",
            "0d47a0f6-2a69-4cc7-9940-12460e77e462",
            "b6c5b09b-dfcd-45c7-b2d4-4e629d55933d",
            "69c63fa4-8d6b-4340-a254-c5a0f1d08249",
            "951fae8c-52d0-4ac6-a5a0-ea796bf6bdd1",
            "2441fb3c-900b-43bc-91d3-d9de66ef19cc",
            "7d4d1b09-2e40-4e7d-be5b-7bb9884caa1f",
            "9bf66677-0ea8-48da-80a9-1c8efe5db0c3",
            "66c09c25-0715-4cda-884a-8c1ba48eda25",
            "e282aa66-d8a4-4fea-8491-be7c271257d9",
            "b01b2604-5736-4191-a11f-3bf26bf443c1",
            "1aedbb2f-6637-403f-9538-0b953bbac5a1",
            "cf7479ec-41d5-4dd9-9235-4d3e8ec1c602",
            "00dd22c9-4bfa-47b7-a573-9ce5903aaaa3",
            "cc334233-3e68-44cb-ae7f-ae10d3fac0ac",
            "b1b84226-7dc6-4a9f-8ce2-7ae053ac85fb",
            "4f6911e3-4b73-4668-ab2e-601ace0c7b2c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "46f9a552-ce07-4b1b-bd06-976ecf766726",
          "title": "convert to meters",
          "fullFile": "D:\\Web\\Git\\JS-Unit-Testing\\first-task\\src\\LengthConverte.test.js",
          "file": "\\src\\LengthConverte.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 1 when the value 100 and unit of measurement cm",
              "fullTitle": "convert to meters should return 1 when the value 100 and unit of measurement cm",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "fabc1c65-4094-48de-9695-41689a9fbe8f",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 1 and unit of measurement m",
              "fullTitle": "convert to meters should return 1 when the value 1 and unit of measurement m",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "aa5905fa-ab62-4bd8-a04d-89b4f0f52373",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 1609.344 and unit of measurement miles",
              "fullTitle": "convert to meters should return 1 when the value 1609.344 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "12c59466-ff10-4c67-a724-9cd94ef552a0",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 0.0005399568034557236 and unit of measurement sea miles",
              "fullTitle": "convert to meters should return 1 when the value 0.0005399568034557236 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "e01cd399-7d95-4b44-a196-cca29323fb8f",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 39.37 and unit of measurement inches",
              "fullTitle": "convert to meters should return 1 when the value 39.37 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "eed44de3-6bb3-453d-bf1b-6036effe49f2",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 3.281 and unit of measurement foot",
              "fullTitle": "convert to meters should return 1 when the value 3.281 and unit of measurement foot",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "e5625cc4-93c3-412c-9996-e540d7944779",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement cm",
              "fullTitle": "convert to meters should return 0 when the value 0 and unit of measurement cm",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "21743da3-34cd-4efa-8adf-e426ccc626e3",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement m",
              "fullTitle": "convert to meters should return 0 when the value 0 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "95e96362-5c77-4c2f-a12f-cae9697fde69",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement miles",
              "fullTitle": "convert to meters should return 0 when the value 0 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "45c9f6ea-7fb1-4c87-a38c-afe9d6e671ac",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement sea miles",
              "fullTitle": "convert to meters should return 0 when the value 0 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "8c7ec544-00d3-4e5b-ab47-e9a1559b6509",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement inches",
              "fullTitle": "convert to meters should return 0 when the value 0 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "4d910b03-6de4-4583-8dc0-0955dfb75fb6",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement foot",
              "fullTitle": "convert to meters should return 0 when the value 0 and unit of measurement foot",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "c8fd11c1-c468-44ad-ac55-bf43ff369c7b",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter string",
              "fullTitle": "convert to meters should return error when first parameter string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "9f99ba2b-7d01-4171-a21c-2a8a8cb4cac1",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter boolean",
              "fullTitle": "convert to meters should return error when first parameter boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "5a5c4833-a954-4d03-9894-5fae307e632a",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter null",
              "fullTitle": "convert to meters should return error when first parameter null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "c6a02a94-e9d0-4506-ac40-8417e9f6192c",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter undefined",
              "fullTitle": "convert to meters should return error when first parameter undefined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "f02f0317-0a96-4c3a-b149-69202178a244",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter a negative number",
              "fullTitle": "convert to meters should return error when first parameter a negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "a03098c7-393c-4b13-97de-9e8e87fe584c",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter string",
              "fullTitle": "convert to meters should return error when second parameter string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "a8750926-e6d7-4869-a955-cd600d2e98a6",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter number",
              "fullTitle": "convert to meters should return error when second parameter number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "05cc4df7-13e1-482b-8dc0-bb810910e5c2",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter boolean",
              "fullTitle": "convert to meters should return error when second parameter boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "f0116d67-5bab-497b-9e18-f843ef648a39",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter null",
              "fullTitle": "convert to meters should return error when second parameter null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "0a39bcfe-ed47-4578-9dab-402dfdc77ea7",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter undefined",
              "fullTitle": "convert to meters should return error when second parameter undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "fa46cc1c-519f-49c8-8967-1a3b920f1df3",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter empty string",
              "fullTitle": "convert to meters should return error when second parameter empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "73e0613c-879b-4fd0-b226-42ddccac3b75",
              "parentUUID": "46f9a552-ce07-4b1b-bd06-976ecf766726",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fabc1c65-4094-48de-9695-41689a9fbe8f",
            "aa5905fa-ab62-4bd8-a04d-89b4f0f52373",
            "12c59466-ff10-4c67-a724-9cd94ef552a0",
            "e01cd399-7d95-4b44-a196-cca29323fb8f",
            "eed44de3-6bb3-453d-bf1b-6036effe49f2",
            "e5625cc4-93c3-412c-9996-e540d7944779",
            "21743da3-34cd-4efa-8adf-e426ccc626e3",
            "95e96362-5c77-4c2f-a12f-cae9697fde69",
            "45c9f6ea-7fb1-4c87-a38c-afe9d6e671ac",
            "8c7ec544-00d3-4e5b-ab47-e9a1559b6509",
            "4d910b03-6de4-4583-8dc0-0955dfb75fb6",
            "c8fd11c1-c468-44ad-ac55-bf43ff369c7b",
            "9f99ba2b-7d01-4171-a21c-2a8a8cb4cac1",
            "5a5c4833-a954-4d03-9894-5fae307e632a",
            "c6a02a94-e9d0-4506-ac40-8417e9f6192c",
            "f02f0317-0a96-4c3a-b149-69202178a244",
            "a03098c7-393c-4b13-97de-9e8e87fe584c",
            "a8750926-e6d7-4869-a955-cd600d2e98a6",
            "05cc4df7-13e1-482b-8dc0-bb810910e5c2",
            "f0116d67-5bab-497b-9e18-f843ef648a39",
            "0a39bcfe-ed47-4578-9dab-402dfdc77ea7",
            "fa46cc1c-519f-49c8-8967-1a3b920f1df3",
            "73e0613c-879b-4fd0-b226-42ddccac3b75"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
          "title": "convert to inches",
          "fullFile": "D:\\Web\\Git\\JS-Unit-Testing\\first-task\\src\\LengthConverte.test.js",
          "file": "\\src\\LengthConverte.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 1 when the value 2.54 and unit of measurement cm",
              "fullTitle": "convert to inches should return 1 when the value 2.54 and unit of measurement cm",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "ad191c16-406c-4598-8f01-9e7b49e15c73",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 39.37 and unit of measurement m",
              "fullTitle": "convert to inches should return 1 when the value 39.37 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "b9c3be88-b227-4f1c-acf9-349ab62fd509",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 63360 and unit of measurement miles",
              "fullTitle": "convert to inches should return 1 when the value 63360 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "407903ac-5f7e-40ab-b710-71e491c2fca8",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 0.000013714902775191375 and unit of measurement sea miles",
              "fullTitle": "convert to inches should return 1 when the value 0.000013714902775191375 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "33d17961-8713-4d1b-90ac-f6f50d6a6810",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 1 and unit of measurement inches",
              "fullTitle": "convert to inches should return 1 when the value 1 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "1bc5d7bc-c74f-42a7-85ed-6214736ce966",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 12 and unit of measurement foot",
              "fullTitle": "convert to inches should return 1 when the value 12 and unit of measurement foot",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "76aa37b8-3e45-4aaa-93b2-52f62f24e653",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement cm",
              "fullTitle": "convert to inches should return 0 when the value 0 and unit of measurement cm",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "c9b0002a-d140-47dc-933c-2ea34a9d0637",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement m",
              "fullTitle": "convert to inches should return 0 when the value 0 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "be1ca9f2-a1d7-4e95-9442-6c5a86dd1db6",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement miles",
              "fullTitle": "convert to inches should return 0 when the value 0 and unit of measurement miles",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "ee432f21-c847-4173-b96e-0657beed0d9f",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement sea miles",
              "fullTitle": "convert to inches should return 0 when the value 0 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "2c103331-0fbd-4f3b-b2ec-c3452104e27d",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement inches",
              "fullTitle": "convert to inches should return 0 when the value 0 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "2d8d80f4-5038-4cd9-b213-a338b718c446",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement foot",
              "fullTitle": "convert to inches should return 0 when the value 0 and unit of measurement foot",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "2a8fe6c3-2046-4ddc-83a1-b30e9c2df91a",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter string",
              "fullTitle": "convert to inches should return error when first parameter string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "00ff3356-7bf8-41d7-a2d5-cf72ce717b25",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter boolean",
              "fullTitle": "convert to inches should return error when first parameter boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "6162e819-809f-48c1-bc7f-2a0ade6299de",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter null",
              "fullTitle": "convert to inches should return error when first parameter null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "98abbb4a-5097-423e-a066-16d5d5376ebd",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter undefined",
              "fullTitle": "convert to inches should return error when first parameter undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "f79f74df-4cbe-4124-9fbe-213ca0dae9d9",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter a negative number",
              "fullTitle": "convert to inches should return error when first parameter a negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "5bed7733-8bbb-4c0d-bdfe-3da148a09c13",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter string",
              "fullTitle": "convert to inches should return error when second parameter string",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "324ca2ee-f126-454a-b388-2fdc693f0d65",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter number",
              "fullTitle": "convert to inches should return error when second parameter number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "3430e827-2922-41ec-9643-9caf8b619b6c",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter boolean",
              "fullTitle": "convert to inches should return error when second parameter boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "5f493bb0-b9aa-4f19-9721-abd2f3dc152c",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter null",
              "fullTitle": "convert to inches should return error when second parameter null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "b25dd142-8d4c-4aef-bf89-2010f7f31f27",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter undefined",
              "fullTitle": "convert to inches should return error when second parameter undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "dad9f2b9-6ed6-4516-80e1-f100d36e0f6d",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter empty string",
              "fullTitle": "convert to inches should return error when second parameter empty string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "aa86da3d-b17c-4337-9a31-f58ab465532b",
              "parentUUID": "fc4500f0-58fc-4f26-87e4-5b5d647de9a8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ad191c16-406c-4598-8f01-9e7b49e15c73",
            "b9c3be88-b227-4f1c-acf9-349ab62fd509",
            "407903ac-5f7e-40ab-b710-71e491c2fca8",
            "33d17961-8713-4d1b-90ac-f6f50d6a6810",
            "1bc5d7bc-c74f-42a7-85ed-6214736ce966",
            "76aa37b8-3e45-4aaa-93b2-52f62f24e653",
            "c9b0002a-d140-47dc-933c-2ea34a9d0637",
            "be1ca9f2-a1d7-4e95-9442-6c5a86dd1db6",
            "ee432f21-c847-4173-b96e-0657beed0d9f",
            "2c103331-0fbd-4f3b-b2ec-c3452104e27d",
            "2d8d80f4-5038-4cd9-b213-a338b718c446",
            "2a8fe6c3-2046-4ddc-83a1-b30e9c2df91a",
            "00ff3356-7bf8-41d7-a2d5-cf72ce717b25",
            "6162e819-809f-48c1-bc7f-2a0ade6299de",
            "98abbb4a-5097-423e-a066-16d5d5376ebd",
            "f79f74df-4cbe-4124-9fbe-213ca0dae9d9",
            "5bed7733-8bbb-4c0d-bdfe-3da148a09c13",
            "324ca2ee-f126-454a-b388-2fdc693f0d65",
            "3430e827-2922-41ec-9643-9caf8b619b6c",
            "5f493bb0-b9aa-4f19-9721-abd2f3dc152c",
            "b25dd142-8d4c-4aef-bf89-2010f7f31f27",
            "dad9f2b9-6ed6-4516-80e1-f100d36e0f6d",
            "aa86da3d-b17c-4337-9a31-f58ab465532b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
          "title": "convert to centimeters",
          "fullFile": "D:\\Web\\Git\\JS-Unit-Testing\\first-task\\src\\LengthConverte.test.js",
          "file": "\\src\\LengthConverte.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 1 when the value 1 and unit of measurement cm",
              "fullTitle": "convert to centimeters should return 1 when the value 1 and unit of measurement cm",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "33196bcf-5817-4813-ba7e-3df813cb37da",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 0.01 and unit of measurement m",
              "fullTitle": "convert to centimeters should return 1 when the value 0.01 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "ff6e1941-437c-48b0-8c21-d65c261dc7fc",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 160934.4 and unit of measurement miles",
              "fullTitle": "convert to centimeters should return 1 when the value 160934.4 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "9c3fbf62-2ce9-4926-9f72-cea179d7b337",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 0.000005399568034557236 and unit of measurement sea miles",
              "fullTitle": "convert to centimeters should return 1 when the value 0.000005399568034557236 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "a7a96a6b-bfad-49c2-9be8-59065579c174",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 2.54 and unit of measurement inches",
              "fullTitle": "convert to centimeters should return 1 when the value 2.54 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "cd602768-6587-446a-8dc2-e2b7cdb832bc",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 30.48 and unit of measurement foot",
              "fullTitle": "convert to centimeters should return 1 when the value 30.48 and unit of measurement foot",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "add65c24-750f-422d-87c6-3d87fe2362db",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement cm",
              "fullTitle": "convert to centimeters should return 0 when the value 0 and unit of measurement cm",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "94df2d3e-b02d-46d8-bf83-7311abe0c501",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement m",
              "fullTitle": "convert to centimeters should return 0 when the value 0 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "11ff2763-f60a-4904-84fe-8cf33f50721e",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement miles",
              "fullTitle": "convert to centimeters should return 0 when the value 0 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "c87884ec-098a-4ac1-80aa-6f506e534d20",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement sea miles",
              "fullTitle": "convert to centimeters should return 0 when the value 0 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "3e86d50e-6304-4525-aa0a-baca9a74d8de",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement inches",
              "fullTitle": "convert to centimeters should return 0 when the value 0 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "cac9f267-09b2-47d6-80a8-43c9fd2682c7",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement foot",
              "fullTitle": "convert to centimeters should return 0 when the value 0 and unit of measurement foot",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "55774138-f3d4-468c-8240-d65e5f583341",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter string",
              "fullTitle": "convert to centimeters should return error when first parameter string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "a7569488-17e6-445d-8fc8-18f2f322f07a",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter boolean",
              "fullTitle": "convert to centimeters should return error when first parameter boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "acd067e2-4cb9-4a99-94e8-dd38b41d9878",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter null",
              "fullTitle": "convert to centimeters should return error when first parameter null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "4529fb6b-f30a-4e61-be18-ddbb80eab9da",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter undefined",
              "fullTitle": "convert to centimeters should return error when first parameter undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "c76cc98a-7824-4835-a919-3e8c08461837",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter a negative number",
              "fullTitle": "convert to centimeters should return error when first parameter a negative number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "b66f91b5-33d5-44bd-b184-5e6de929b6de",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter string",
              "fullTitle": "convert to centimeters should return error when second parameter string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "49c3da4d-883e-4347-a75a-24ca5f9d41cc",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter number",
              "fullTitle": "convert to centimeters should return error when second parameter number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "ca35f22a-f0da-4997-aa7d-17fdd2962e6e",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter boolean",
              "fullTitle": "convert to centimeters should return error when second parameter boolean",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "07d08ae1-0ffc-4d72-becf-81be254318f5",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter null",
              "fullTitle": "convert to centimeters should return error when second parameter null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "a4e9c214-e15f-409b-95b3-ed143bd3e914",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter undefined",
              "fullTitle": "convert to centimeters should return error when second parameter undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "9948bddd-f2c5-466b-b463-734095b026df",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter empty string",
              "fullTitle": "convert to centimeters should return error when second parameter empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "00076696-1d32-4046-ab24-d1ab66e5a967",
              "parentUUID": "a94d504f-0d6b-4dba-b4ce-71926bd38179",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "33196bcf-5817-4813-ba7e-3df813cb37da",
            "ff6e1941-437c-48b0-8c21-d65c261dc7fc",
            "9c3fbf62-2ce9-4926-9f72-cea179d7b337",
            "a7a96a6b-bfad-49c2-9be8-59065579c174",
            "cd602768-6587-446a-8dc2-e2b7cdb832bc",
            "add65c24-750f-422d-87c6-3d87fe2362db",
            "94df2d3e-b02d-46d8-bf83-7311abe0c501",
            "11ff2763-f60a-4904-84fe-8cf33f50721e",
            "c87884ec-098a-4ac1-80aa-6f506e534d20",
            "3e86d50e-6304-4525-aa0a-baca9a74d8de",
            "cac9f267-09b2-47d6-80a8-43c9fd2682c7",
            "55774138-f3d4-468c-8240-d65e5f583341",
            "a7569488-17e6-445d-8fc8-18f2f322f07a",
            "acd067e2-4cb9-4a99-94e8-dd38b41d9878",
            "4529fb6b-f30a-4e61-be18-ddbb80eab9da",
            "c76cc98a-7824-4835-a919-3e8c08461837",
            "b66f91b5-33d5-44bd-b184-5e6de929b6de",
            "49c3da4d-883e-4347-a75a-24ca5f9d41cc",
            "ca35f22a-f0da-4997-aa7d-17fdd2962e6e",
            "07d08ae1-0ffc-4d72-becf-81be254318f5",
            "a4e9c214-e15f-409b-95b3-ed143bd3e914",
            "9948bddd-f2c5-466b-b463-734095b026df",
            "00076696-1d32-4046-ab24-d1ab66e5a967"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
          "title": "convert to sea miles",
          "fullFile": "D:\\Web\\Git\\JS-Unit-Testing\\first-task\\src\\LengthConverte.test.js",
          "file": "\\src\\LengthConverte.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 1 when the value 185200 and unit of measurement cm",
              "fullTitle": "convert to sea miles should return 1 when the value 185200 and unit of measurement cm",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "0a2ccfae-47e3-434e-81a7-0f4f26270cc4",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 1852 and unit of measurement m",
              "fullTitle": "convert to sea miles should return 1 when the value 1852 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "5099352b-1204-4315-a0de-bf393682a36f",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 1.151 and unit of measurement miles",
              "fullTitle": "convert to sea miles should return 1 when the value 1.151 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "9f2b959e-52c2-4dae-8bf9-7b6b6646c412",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 1 and unit of measurement sea miles",
              "fullTitle": "convert to sea miles should return 1 when the value 1 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "083d72ce-9608-4292-8c61-bf8810bb768f",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 72913.386 and unit of measurement inches",
              "fullTitle": "convert to sea miles should return 1 when the value 72913.386 and unit of measurement inches",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "b784dac7-9549-4195-8568-2218c0ff58ac",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 6076.115 and unit of measurement foot",
              "fullTitle": "convert to sea miles should return 1 when the value 6076.115 and unit of measurement foot",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "15b7001d-c085-451a-9902-d3da60775e61",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement cm",
              "fullTitle": "convert to sea miles should return 0 when the value 0 and unit of measurement cm",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "7749431a-f27d-487b-99a7-69dc6bed335e",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement m",
              "fullTitle": "convert to sea miles should return 0 when the value 0 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "4e058257-80d2-4dce-8cd2-db9ab5ad2e3f",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement miles",
              "fullTitle": "convert to sea miles should return 0 when the value 0 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "32c7d53d-ee8f-4607-af4e-151b5bccab93",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement sea miles",
              "fullTitle": "convert to sea miles should return 0 when the value 0 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "eaeef359-acb0-4c27-8ccc-b83361c45dfb",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement inches",
              "fullTitle": "convert to sea miles should return 0 when the value 0 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "39c3aa03-aad9-4e54-87a4-2e41632d52d8",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement foot",
              "fullTitle": "convert to sea miles should return 0 when the value 0 and unit of measurement foot",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "e932cd49-e89d-4d66-8dac-1a3e6489c130",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter string",
              "fullTitle": "convert to sea miles should return error when first parameter string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "20e888a9-9406-4e19-af86-329a46f4a487",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter boolean",
              "fullTitle": "convert to sea miles should return error when first parameter boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "814ec651-e5e5-4872-9056-f641a78eecab",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter null",
              "fullTitle": "convert to sea miles should return error when first parameter null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "553c6535-8898-402a-a481-9d91db9ed3e4",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter undefined",
              "fullTitle": "convert to sea miles should return error when first parameter undefined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "56d6523b-50df-4bf4-99d1-e303682e36c6",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter a negative number",
              "fullTitle": "convert to sea miles should return error when first parameter a negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "8d0708a5-1513-4b2c-b083-03ba72a52f71",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter string",
              "fullTitle": "convert to sea miles should return error when second parameter string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "d973f6e6-2ab8-4b56-a5e4-ce64485daa02",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter number",
              "fullTitle": "convert to sea miles should return error when second parameter number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "1624c070-c98b-4c20-bacd-15a95a5974da",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter boolean",
              "fullTitle": "convert to sea miles should return error when second parameter boolean",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "6055114c-c9d8-45f1-b962-c5f1c3e885b4",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter null",
              "fullTitle": "convert to sea miles should return error when second parameter null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "ad96d64c-a03d-4210-aadf-ca2673bd670c",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter undefined",
              "fullTitle": "convert to sea miles should return error when second parameter undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "243586f9-ac26-4d1d-a3b8-4a5bb6939272",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter empty string",
              "fullTitle": "convert to sea miles should return error when second parameter empty string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "d21bfd05-71bb-4041-9068-3ee544e3940b",
              "parentUUID": "34de82ac-a512-411b-8cb1-bb6c1e5a9e38",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0a2ccfae-47e3-434e-81a7-0f4f26270cc4",
            "5099352b-1204-4315-a0de-bf393682a36f",
            "9f2b959e-52c2-4dae-8bf9-7b6b6646c412",
            "083d72ce-9608-4292-8c61-bf8810bb768f",
            "b784dac7-9549-4195-8568-2218c0ff58ac",
            "15b7001d-c085-451a-9902-d3da60775e61",
            "7749431a-f27d-487b-99a7-69dc6bed335e",
            "4e058257-80d2-4dce-8cd2-db9ab5ad2e3f",
            "32c7d53d-ee8f-4607-af4e-151b5bccab93",
            "eaeef359-acb0-4c27-8ccc-b83361c45dfb",
            "39c3aa03-aad9-4e54-87a4-2e41632d52d8",
            "e932cd49-e89d-4d66-8dac-1a3e6489c130",
            "20e888a9-9406-4e19-af86-329a46f4a487",
            "814ec651-e5e5-4872-9056-f641a78eecab",
            "553c6535-8898-402a-a481-9d91db9ed3e4",
            "56d6523b-50df-4bf4-99d1-e303682e36c6",
            "8d0708a5-1513-4b2c-b083-03ba72a52f71",
            "d973f6e6-2ab8-4b56-a5e4-ce64485daa02",
            "1624c070-c98b-4c20-bacd-15a95a5974da",
            "6055114c-c9d8-45f1-b962-c5f1c3e885b4",
            "ad96d64c-a03d-4210-aadf-ca2673bd670c",
            "243586f9-ac26-4d1d-a3b8-4a5bb6939272",
            "d21bfd05-71bb-4041-9068-3ee544e3940b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ec05dadf-5ced-404f-9803-da9e485e7129",
          "title": "convert to foot",
          "fullFile": "D:\\Web\\Git\\JS-Unit-Testing\\first-task\\src\\LengthConverte.test.js",
          "file": "\\src\\LengthConverte.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 1 when the value 30.48 and unit of measurement cm",
              "fullTitle": "convert to foot should return 1 when the value 30.48 and unit of measurement cm",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "60e69d97-237b-4e5a-b032-a2d89220f983",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 3.281 and unit of measurement m",
              "fullTitle": "convert to foot should return 1 when the value 3.281 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "40304e25-a184-464a-8777-c63b76c18727",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 5280 and unit of measurement miles",
              "fullTitle": "convert to foot should return 1 when the value 5280 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "ba761546-f25f-4d8f-b13d-7f031122222a",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 0.00016457884684539383 and unit of measurement sea miles",
              "fullTitle": "convert to foot should return 1 when the value 0.00016457884684539383 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "6a28ebd5-63cf-4094-a2c6-375676e01d17",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 12 and unit of measurement inches",
              "fullTitle": "convert to foot should return 1 when the value 12 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "7031b07f-601c-45b7-b03c-3a6f35e066fc",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 1 and unit of measurement foot",
              "fullTitle": "convert to foot should return 1 when the value 1 and unit of measurement foot",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "0cf61980-2b5e-4dbb-b858-849cb948f574",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement cm",
              "fullTitle": "convert to foot should return 0 when the value 0 and unit of measurement cm",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "d5c52066-3ce4-4f3e-a626-fbb02b373e27",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement m",
              "fullTitle": "convert to foot should return 0 when the value 0 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "abe23334-2bb7-4429-95f1-c24d1e96d87f",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement miles",
              "fullTitle": "convert to foot should return 0 when the value 0 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "794f9a3c-8f46-4a57-b0e4-46460bbb67c6",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement sea miles",
              "fullTitle": "convert to foot should return 0 when the value 0 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "a5b83068-8010-47af-86d4-5c6c090ddf4c",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement inches",
              "fullTitle": "convert to foot should return 0 when the value 0 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "4df7a7dd-edfc-44cb-8b9f-ebe546925a47",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement foot",
              "fullTitle": "convert to foot should return 0 when the value 0 and unit of measurement foot",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "f8825f51-45b0-4a74-a4f2-acf6e5a0763f",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter string",
              "fullTitle": "convert to foot should return error when first parameter string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "1fa9128e-aa61-4c0a-8d11-fc3a0e0fb93d",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter boolean",
              "fullTitle": "convert to foot should return error when first parameter boolean",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "583943aa-fef3-477f-8c7b-066253e8e8bc",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter null",
              "fullTitle": "convert to foot should return error when first parameter null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "25536c5e-545a-4253-ae51-f3fe3ded9c4c",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter undefined",
              "fullTitle": "convert to foot should return error when first parameter undefined",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "89cf0cb4-5105-4000-b883-9fa80df35806",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter a negative number",
              "fullTitle": "convert to foot should return error when first parameter a negative number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "79502556-19dd-4537-8bae-f8cbbc75996f",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter string",
              "fullTitle": "convert to foot should return error when second parameter string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "76fcdbb4-816c-4fa7-adfa-a57cfd167f81",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter number",
              "fullTitle": "convert to foot should return error when second parameter number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "8242cec4-2048-4a41-9576-37872b11b64e",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter boolean",
              "fullTitle": "convert to foot should return error when second parameter boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "002207b0-bf88-4cfe-98e8-2615ad5a0308",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter null",
              "fullTitle": "convert to foot should return error when second parameter null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "7a046cf5-ee41-4b51-a5a3-4cf21a518d48",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter undefined",
              "fullTitle": "convert to foot should return error when second parameter undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "76141ce0-f3bc-4051-aa6d-9bbcfff9b39c",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter empty string",
              "fullTitle": "convert to foot should return error when second parameter empty string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "3c5c0cee-504b-4393-9887-ba9df2e2f268",
              "parentUUID": "ec05dadf-5ced-404f-9803-da9e485e7129",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "60e69d97-237b-4e5a-b032-a2d89220f983",
            "40304e25-a184-464a-8777-c63b76c18727",
            "ba761546-f25f-4d8f-b13d-7f031122222a",
            "6a28ebd5-63cf-4094-a2c6-375676e01d17",
            "7031b07f-601c-45b7-b03c-3a6f35e066fc",
            "0cf61980-2b5e-4dbb-b858-849cb948f574",
            "d5c52066-3ce4-4f3e-a626-fbb02b373e27",
            "abe23334-2bb7-4429-95f1-c24d1e96d87f",
            "794f9a3c-8f46-4a57-b0e4-46460bbb67c6",
            "a5b83068-8010-47af-86d4-5c6c090ddf4c",
            "4df7a7dd-edfc-44cb-8b9f-ebe546925a47",
            "f8825f51-45b0-4a74-a4f2-acf6e5a0763f",
            "1fa9128e-aa61-4c0a-8d11-fc3a0e0fb93d",
            "583943aa-fef3-477f-8c7b-066253e8e8bc",
            "25536c5e-545a-4253-ae51-f3fe3ded9c4c",
            "89cf0cb4-5105-4000-b883-9fa80df35806",
            "79502556-19dd-4537-8bae-f8cbbc75996f",
            "76fcdbb4-816c-4fa7-adfa-a57cfd167f81",
            "8242cec4-2048-4a41-9576-37872b11b64e",
            "002207b0-bf88-4cfe-98e8-2615ad5a0308",
            "7a046cf5-ee41-4b51-a5a3-4cf21a518d48",
            "76141ce0-f3bc-4051-aa6d-9bbcfff9b39c",
            "3c5c0cee-504b-4393-9887-ba9df2e2f268"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9baf7ec5-b0ea-49a2-8744-496ca6424d0e",
          "title": "util type",
          "fullFile": "D:\\Web\\Git\\JS-Unit-Testing\\first-task\\src\\utils.test.js",
          "file": "\\src\\utils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return string",
              "fullTitle": "util type should return string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(type('1'), 'string');",
              "err": {},
              "uuid": "e4be952c-aa17-48d1-bf36-397819e66e59",
              "parentUUID": "9baf7ec5-b0ea-49a2-8744-496ca6424d0e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return number",
              "fullTitle": "util type should return number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(type(1), 'number');",
              "err": {},
              "uuid": "785b0ce1-ab9b-425a-91e5-08d8d4170fc1",
              "parentUUID": "9baf7ec5-b0ea-49a2-8744-496ca6424d0e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return boolean",
              "fullTitle": "util type should return boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(type(true), 'boolean');",
              "err": {},
              "uuid": "664af9cc-da7c-424d-ad0a-ad5160cfb6ef",
              "parentUUID": "9baf7ec5-b0ea-49a2-8744-496ca6424d0e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null",
              "fullTitle": "util type should return null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(type(null), 'null');",
              "err": {},
              "uuid": "1c708828-e62f-4044-8688-b6cbda0d23a6",
              "parentUUID": "9baf7ec5-b0ea-49a2-8744-496ca6424d0e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return undefined",
              "fullTitle": "util type should return undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(type(undefined), 'undefined');",
              "err": {},
              "uuid": "334d57bd-ccdb-4763-a6cf-10113f8c0778",
              "parentUUID": "9baf7ec5-b0ea-49a2-8744-496ca6424d0e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return array",
              "fullTitle": "util type should return array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(type([]), 'array');",
              "err": {},
              "uuid": "400b9c2b-578b-4712-8ee6-29c3765fd843",
              "parentUUID": "9baf7ec5-b0ea-49a2-8744-496ca6424d0e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return object",
              "fullTitle": "util type should return object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(type({}), 'object');",
              "err": {},
              "uuid": "e275f676-3ecc-43d4-bcca-ef42d7af06a0",
              "parentUUID": "9baf7ec5-b0ea-49a2-8744-496ca6424d0e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return function",
              "fullTitle": "util type should return function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(type(() => {}), 'function');",
              "err": {},
              "uuid": "abb5d8b2-007b-468b-87f0-478066d98d79",
              "parentUUID": "9baf7ec5-b0ea-49a2-8744-496ca6424d0e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e4be952c-aa17-48d1-bf36-397819e66e59",
            "785b0ce1-ab9b-425a-91e5-08d8d4170fc1",
            "664af9cc-da7c-424d-ad0a-ad5160cfb6ef",
            "1c708828-e62f-4044-8688-b6cbda0d23a6",
            "334d57bd-ccdb-4763-a6cf-10113f8c0778",
            "400b9c2b-578b-4712-8ee6-29c3765fd843",
            "e275f676-3ecc-43d4-bcca-ef42d7af06a0",
            "abb5d8b2-007b-468b-87f0-478066d98d79"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "useInlineDiffs": false
      },
      "version": "4.0.1"
    },
    "marge": {
      "options": null,
      "version": "4.0.1"
    }
  }
}