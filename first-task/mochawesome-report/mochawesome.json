{
  "stats": {
    "suites": 7,
    "tests": 146,
    "passes": 146,
    "pending": 0,
    "failures": 0,
    "start": "2019-08-05T13:51:07.150Z",
    "end": "2019-08-05T13:51:20.139Z",
    "duration": 12989,
    "testsRegistered": 146,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "163f87f7-43d5-48d5-bc26-aaccebc3832d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d9e9014e-1307-425f-9e1f-4e048954611f",
          "title": "convert to miles",
          "fullFile": "D:\\Web\\Git\\JS-Unit-Testing\\first-task\\src\\LengthConverte.test.js",
          "file": "\\src\\LengthConverte.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 1 when the value 160934.4 and unit of measurement cm",
              "fullTitle": "convert to miles should return 1 when the value 160934.4 and unit of measurement cm",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "a834a629-d1a1-4dc2-ba0c-e44daf64345b",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 1609.344 and unit of measurement m",
              "fullTitle": "convert to miles should return 1 when the value 1609.344 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "ee3fe74a-8440-4b09-b87f-eb6ccc0d546b",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 1 and unit of measurement miles",
              "fullTitle": "convert to miles should return 1 when the value 1 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "31766347-01fe-48d9-9ad5-79b58b7ed6c9",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 0.8688097306689835 and unit of measurement sea miles",
              "fullTitle": "convert to miles should return 1 when the value 0.8688097306689835 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "5054e8ba-3b9a-47b7-8356-01a0ceb3f88c",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 63360 and unit of measurement inches",
              "fullTitle": "convert to miles should return 1 when the value 63360 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "d5452e95-d931-47bd-8f7e-a01a3c7c12fb",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 5280 and unit of measurement foot",
              "fullTitle": "convert to miles should return 1 when the value 5280 and unit of measurement foot",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "5b9bf5a7-cdc2-4182-acf1-9226f313a358",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement cm",
              "fullTitle": "convert to miles should return 0 when the value 0 and unit of measurement cm",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "d51f3669-cc2b-4600-8159-f87e8ed745f8",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement m",
              "fullTitle": "convert to miles should return 0 when the value 0 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "a5d764a6-1c26-47a3-ba03-928eda918ac1",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement miles",
              "fullTitle": "convert to miles should return 0 when the value 0 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "e3ce66e2-6620-4f2f-b9eb-ce2a3780017a",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement sea miles",
              "fullTitle": "convert to miles should return 0 when the value 0 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "3e91de61-9146-4f86-8924-3728f9ac19c5",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement inches",
              "fullTitle": "convert to miles should return 0 when the value 0 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "3832fede-5856-49a5-a16c-e90c30345e77",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement foot",
              "fullTitle": "convert to miles should return 0 when the value 0 and unit of measurement foot",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "b61eef84-cbee-4948-a9e6-0734698b4cc0",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter string",
              "fullTitle": "convert to miles should return error when first parameter string",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "0bb27717-f82e-4fa4-bbee-00e81e445beb",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter boolean",
              "fullTitle": "convert to miles should return error when first parameter boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "a5650a08-8d7f-45b0-bdf9-cb7a7b9b293d",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter null",
              "fullTitle": "convert to miles should return error when first parameter null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "9b26e392-0625-438d-ab23-06a908c92d5a",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter undefined",
              "fullTitle": "convert to miles should return error when first parameter undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "0319191e-36b2-4501-ad27-79b57d797d7e",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter a negative number",
              "fullTitle": "convert to miles should return error when first parameter a negative number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "aa3ffb30-daef-474d-a1f2-7d7a422d1d63",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter string",
              "fullTitle": "convert to miles should return error when second parameter string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "299eecec-66a3-4e45-bcf6-44d297a53bab",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter number",
              "fullTitle": "convert to miles should return error when second parameter number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "c0afc7e5-8ec2-47db-ac04-ce34a7eb6de2",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter boolean",
              "fullTitle": "convert to miles should return error when second parameter boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "edb03c2e-e92c-480c-a551-d7174858f27f",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter null",
              "fullTitle": "convert to miles should return error when second parameter null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "d159a328-1958-48fe-a35c-25b2bcc8998f",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter undefined",
              "fullTitle": "convert to miles should return error when second parameter undefined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "d552d51b-d19c-4307-9139-7b99b10b7a7a",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter empty string",
              "fullTitle": "convert to miles should return error when second parameter empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "e58a91eb-1c00-444a-9fce-63a8124de13e",
              "parentUUID": "d9e9014e-1307-425f-9e1f-4e048954611f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a834a629-d1a1-4dc2-ba0c-e44daf64345b",
            "ee3fe74a-8440-4b09-b87f-eb6ccc0d546b",
            "31766347-01fe-48d9-9ad5-79b58b7ed6c9",
            "5054e8ba-3b9a-47b7-8356-01a0ceb3f88c",
            "d5452e95-d931-47bd-8f7e-a01a3c7c12fb",
            "5b9bf5a7-cdc2-4182-acf1-9226f313a358",
            "d51f3669-cc2b-4600-8159-f87e8ed745f8",
            "a5d764a6-1c26-47a3-ba03-928eda918ac1",
            "e3ce66e2-6620-4f2f-b9eb-ce2a3780017a",
            "3e91de61-9146-4f86-8924-3728f9ac19c5",
            "3832fede-5856-49a5-a16c-e90c30345e77",
            "b61eef84-cbee-4948-a9e6-0734698b4cc0",
            "0bb27717-f82e-4fa4-bbee-00e81e445beb",
            "a5650a08-8d7f-45b0-bdf9-cb7a7b9b293d",
            "9b26e392-0625-438d-ab23-06a908c92d5a",
            "0319191e-36b2-4501-ad27-79b57d797d7e",
            "aa3ffb30-daef-474d-a1f2-7d7a422d1d63",
            "299eecec-66a3-4e45-bcf6-44d297a53bab",
            "c0afc7e5-8ec2-47db-ac04-ce34a7eb6de2",
            "edb03c2e-e92c-480c-a551-d7174858f27f",
            "d159a328-1958-48fe-a35c-25b2bcc8998f",
            "d552d51b-d19c-4307-9139-7b99b10b7a7a",
            "e58a91eb-1c00-444a-9fce-63a8124de13e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
          "title": "convert to meters",
          "fullFile": "D:\\Web\\Git\\JS-Unit-Testing\\first-task\\src\\LengthConverte.test.js",
          "file": "\\src\\LengthConverte.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 1 when the value 100 and unit of measurement cm",
              "fullTitle": "convert to meters should return 1 when the value 100 and unit of measurement cm",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "45eeda7a-172b-415c-af9d-77bc1bf90b41",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 1 and unit of measurement m",
              "fullTitle": "convert to meters should return 1 when the value 1 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "2e67dd04-f7e2-4b83-86d9-7f287e6e8229",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 0.0006213711922373339 and unit of measurement miles",
              "fullTitle": "convert to meters should return 1 when the value 0.0006213711922373339 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "fb337c29-0db5-4bdc-bc40-28136d2741a1",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 0.0005399568034557236 and unit of measurement sea miles",
              "fullTitle": "convert to meters should return 1 when the value 0.0005399568034557236 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "727a96cb-45ce-47d5-8bd4-bf53cd29d768",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 39.37 and unit of measurement inches",
              "fullTitle": "convert to meters should return 1 when the value 39.37 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "92ab3f8c-150b-47d1-b4ed-442b9c062f20",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 3.281 and unit of measurement foot",
              "fullTitle": "convert to meters should return 1 when the value 3.281 and unit of measurement foot",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "2dfab567-f116-4d11-86f2-c273c7c39473",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement cm",
              "fullTitle": "convert to meters should return 0 when the value 0 and unit of measurement cm",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "dfba1c25-bef9-4c29-a989-e80d65c06118",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement m",
              "fullTitle": "convert to meters should return 0 when the value 0 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "ba281d64-d396-46e7-9b1d-f7eb9ed32bcb",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement miles",
              "fullTitle": "convert to meters should return 0 when the value 0 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "5e2c86a9-45d6-4cd0-9379-65cad776f46a",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement sea miles",
              "fullTitle": "convert to meters should return 0 when the value 0 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "0337d4eb-a67a-48f8-83f3-e0287a06c193",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement inches",
              "fullTitle": "convert to meters should return 0 when the value 0 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "e46b2361-a0cf-4cae-bada-07f41c369915",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement foot",
              "fullTitle": "convert to meters should return 0 when the value 0 and unit of measurement foot",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "ed6f0cf2-bcd0-4e66-b8e9-cac726283cc0",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter string",
              "fullTitle": "convert to meters should return error when first parameter string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "2f8cae39-c12e-4117-8d52-87c1ef29e7bf",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter boolean",
              "fullTitle": "convert to meters should return error when first parameter boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "3995f96a-8e79-4d63-9447-c70c2a3317ef",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter null",
              "fullTitle": "convert to meters should return error when first parameter null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "622919bd-03d5-4cf8-9322-b937d1498155",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter undefined",
              "fullTitle": "convert to meters should return error when first parameter undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "a4ffe64b-0fc2-49ba-b289-c81421898209",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter a negative number",
              "fullTitle": "convert to meters should return error when first parameter a negative number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "a370cca5-0519-4247-99af-bac050daae67",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter string",
              "fullTitle": "convert to meters should return error when second parameter string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "0408c2ae-15a0-47fb-b6f1-8032bcbe1dcd",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter number",
              "fullTitle": "convert to meters should return error when second parameter number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "eccfb2d3-b056-4372-aea9-29e76a435bed",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter boolean",
              "fullTitle": "convert to meters should return error when second parameter boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "61d13005-a155-4c61-8b53-a83dfed7862c",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter null",
              "fullTitle": "convert to meters should return error when second parameter null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "ad7ef7fe-dba2-4558-911b-ba8f4a832ba9",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter undefined",
              "fullTitle": "convert to meters should return error when second parameter undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "ed4a2987-f22d-4f99-aab1-69910a969576",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter empty string",
              "fullTitle": "convert to meters should return error when second parameter empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "07184b35-7d19-4e9c-9d9c-c45edf22b744",
              "parentUUID": "7d98181b-55a1-4853-97b5-6291c0a8ed7d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "45eeda7a-172b-415c-af9d-77bc1bf90b41",
            "2e67dd04-f7e2-4b83-86d9-7f287e6e8229",
            "fb337c29-0db5-4bdc-bc40-28136d2741a1",
            "727a96cb-45ce-47d5-8bd4-bf53cd29d768",
            "92ab3f8c-150b-47d1-b4ed-442b9c062f20",
            "2dfab567-f116-4d11-86f2-c273c7c39473",
            "dfba1c25-bef9-4c29-a989-e80d65c06118",
            "ba281d64-d396-46e7-9b1d-f7eb9ed32bcb",
            "5e2c86a9-45d6-4cd0-9379-65cad776f46a",
            "0337d4eb-a67a-48f8-83f3-e0287a06c193",
            "e46b2361-a0cf-4cae-bada-07f41c369915",
            "ed6f0cf2-bcd0-4e66-b8e9-cac726283cc0",
            "2f8cae39-c12e-4117-8d52-87c1ef29e7bf",
            "3995f96a-8e79-4d63-9447-c70c2a3317ef",
            "622919bd-03d5-4cf8-9322-b937d1498155",
            "a4ffe64b-0fc2-49ba-b289-c81421898209",
            "a370cca5-0519-4247-99af-bac050daae67",
            "0408c2ae-15a0-47fb-b6f1-8032bcbe1dcd",
            "eccfb2d3-b056-4372-aea9-29e76a435bed",
            "61d13005-a155-4c61-8b53-a83dfed7862c",
            "ad7ef7fe-dba2-4558-911b-ba8f4a832ba9",
            "ed4a2987-f22d-4f99-aab1-69910a969576",
            "07184b35-7d19-4e9c-9d9c-c45edf22b744"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
          "title": "convert to inches",
          "fullFile": "D:\\Web\\Git\\JS-Unit-Testing\\first-task\\src\\LengthConverte.test.js",
          "file": "\\src\\LengthConverte.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 1 when the value 2.54 and unit of measurement cm",
              "fullTitle": "convert to inches should return 1 when the value 2.54 and unit of measurement cm",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "11672c84-3414-46a3-a613-d4689a78be41",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 0.0254 and unit of measurement m",
              "fullTitle": "convert to inches should return 1 when the value 0.0254 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "156a883d-9df7-4962-9a72-428cf2ddaaac",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 0.000015782828282828283 and unit of measurement miles",
              "fullTitle": "convert to inches should return 1 when the value 0.000015782828282828283 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "2c8d0c7c-8273-4afb-93b5-d53694399e9a",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 0.000013714902775191375 and unit of measurement sea miles",
              "fullTitle": "convert to inches should return 1 when the value 0.000013714902775191375 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "ba64b468-8119-4a7a-bc8e-741967d308cc",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 1 and unit of measurement inches",
              "fullTitle": "convert to inches should return 1 when the value 1 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "c40f6704-e57e-4b52-bb71-b980f3a5015e",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 0.08333333333333333 and unit of measurement foot",
              "fullTitle": "convert to inches should return 1 when the value 0.08333333333333333 and unit of measurement foot",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "44a8b01e-79d0-4658-ad89-2b880a1bc9a8",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement cm",
              "fullTitle": "convert to inches should return 0 when the value 0 and unit of measurement cm",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "771127a7-9580-4244-82ac-b15c8f26b494",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement m",
              "fullTitle": "convert to inches should return 0 when the value 0 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "385eed3f-e20a-4da3-b114-ffae516a0014",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement miles",
              "fullTitle": "convert to inches should return 0 when the value 0 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "7d792864-1447-4b59-b4ed-3740e1a8d497",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement sea miles",
              "fullTitle": "convert to inches should return 0 when the value 0 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "634759fa-8b89-4155-9c96-57bb408a097c",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement inches",
              "fullTitle": "convert to inches should return 0 when the value 0 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "9e94b214-b7af-4d6e-ab1b-075a9370fc0b",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement foot",
              "fullTitle": "convert to inches should return 0 when the value 0 and unit of measurement foot",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "c25c1ec7-ba4c-4319-9d86-d2128bb94d2e",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter string",
              "fullTitle": "convert to inches should return error when first parameter string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "214d97bf-fd13-45c7-beb4-9204d7efec95",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter boolean",
              "fullTitle": "convert to inches should return error when first parameter boolean",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "6430db06-d067-44a8-b57c-c0d45a6657e1",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter null",
              "fullTitle": "convert to inches should return error when first parameter null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "f3e8aa35-483e-440b-b899-38f169c620d4",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter undefined",
              "fullTitle": "convert to inches should return error when first parameter undefined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "eca72fdb-2d7a-4f36-8305-f59e2913ec21",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter a negative number",
              "fullTitle": "convert to inches should return error when first parameter a negative number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "5fe97492-98f1-4efa-8180-f0f9b9ff07f4",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter string",
              "fullTitle": "convert to inches should return error when second parameter string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "98a0840f-4c2f-47fc-b8f3-3a8b6e0ea747",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter number",
              "fullTitle": "convert to inches should return error when second parameter number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "89599596-c5d3-438c-93c7-5871af601d8b",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter boolean",
              "fullTitle": "convert to inches should return error when second parameter boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "d23650b2-0bd4-4213-9aec-8b9566360c79",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter null",
              "fullTitle": "convert to inches should return error when second parameter null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "14dafb26-194a-46f8-8f5f-c751f01991e8",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter undefined",
              "fullTitle": "convert to inches should return error when second parameter undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "af82ef7a-5223-4eae-b3e6-4020cacdc1f1",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter empty string",
              "fullTitle": "convert to inches should return error when second parameter empty string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "dc0f115a-122a-4e1a-8b86-4803632d471c",
              "parentUUID": "a631c9a2-13e3-43a9-ba44-0ab4c32267f8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "11672c84-3414-46a3-a613-d4689a78be41",
            "156a883d-9df7-4962-9a72-428cf2ddaaac",
            "2c8d0c7c-8273-4afb-93b5-d53694399e9a",
            "ba64b468-8119-4a7a-bc8e-741967d308cc",
            "c40f6704-e57e-4b52-bb71-b980f3a5015e",
            "44a8b01e-79d0-4658-ad89-2b880a1bc9a8",
            "771127a7-9580-4244-82ac-b15c8f26b494",
            "385eed3f-e20a-4da3-b114-ffae516a0014",
            "7d792864-1447-4b59-b4ed-3740e1a8d497",
            "634759fa-8b89-4155-9c96-57bb408a097c",
            "9e94b214-b7af-4d6e-ab1b-075a9370fc0b",
            "c25c1ec7-ba4c-4319-9d86-d2128bb94d2e",
            "214d97bf-fd13-45c7-beb4-9204d7efec95",
            "6430db06-d067-44a8-b57c-c0d45a6657e1",
            "f3e8aa35-483e-440b-b899-38f169c620d4",
            "eca72fdb-2d7a-4f36-8305-f59e2913ec21",
            "5fe97492-98f1-4efa-8180-f0f9b9ff07f4",
            "98a0840f-4c2f-47fc-b8f3-3a8b6e0ea747",
            "89599596-c5d3-438c-93c7-5871af601d8b",
            "d23650b2-0bd4-4213-9aec-8b9566360c79",
            "14dafb26-194a-46f8-8f5f-c751f01991e8",
            "af82ef7a-5223-4eae-b3e6-4020cacdc1f1",
            "dc0f115a-122a-4e1a-8b86-4803632d471c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
          "title": "convert to centimeters",
          "fullFile": "D:\\Web\\Git\\JS-Unit-Testing\\first-task\\src\\LengthConverte.test.js",
          "file": "\\src\\LengthConverte.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 1 when the value 1 and unit of measurement cm",
              "fullTitle": "convert to centimeters should return 1 when the value 1 and unit of measurement cm",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "b7db5f36-43ef-48ea-97e4-94fe808603db",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 0.01 and unit of measurement m",
              "fullTitle": "convert to centimeters should return 1 when the value 0.01 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "c68968ee-1750-4926-96ec-b4752820e766",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 0.00000621371192237334 and unit of measurement miles",
              "fullTitle": "convert to centimeters should return 1 when the value 0.00000621371192237334 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "e22157da-8cf6-489b-b846-fe8cf9c183a7",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 0.000005399568034557236 and unit of measurement sea miles",
              "fullTitle": "convert to centimeters should return 1 when the value 0.000005399568034557236 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "15b67649-7947-4882-8e91-cf590ba23138",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 0.39370078740157477 and unit of measurement inches",
              "fullTitle": "convert to centimeters should return 1 when the value 0.39370078740157477 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "9e7c1fe8-0177-494f-bebe-ce54c0a654db",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 0.03280839895013123 and unit of measurement foot",
              "fullTitle": "convert to centimeters should return 1 when the value 0.03280839895013123 and unit of measurement foot",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "22db6ff4-29b4-4e4f-b8e0-c160cb8b193c",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement cm",
              "fullTitle": "convert to centimeters should return 0 when the value 0 and unit of measurement cm",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "5035f0e7-88b5-49a1-a5c4-eba03bf096fd",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement m",
              "fullTitle": "convert to centimeters should return 0 when the value 0 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "1748196e-c132-4daa-a2e5-53da3f79637e",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement miles",
              "fullTitle": "convert to centimeters should return 0 when the value 0 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "c80555cf-634c-4c5b-9040-1c693aef89d1",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement sea miles",
              "fullTitle": "convert to centimeters should return 0 when the value 0 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "6f953f72-b435-434e-8c27-bc1dd2faec24",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement inches",
              "fullTitle": "convert to centimeters should return 0 when the value 0 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "c774c54c-3aee-4411-b4fd-44b1184a2d47",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement foot",
              "fullTitle": "convert to centimeters should return 0 when the value 0 and unit of measurement foot",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "091a27c9-c27e-4134-a482-e3fe2b790c55",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter string",
              "fullTitle": "convert to centimeters should return error when first parameter string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "c7fdfd2b-1640-4aa3-ab3c-5d08178972a1",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter boolean",
              "fullTitle": "convert to centimeters should return error when first parameter boolean",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "156209b4-b51e-41b3-b405-744bbd1ade92",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter null",
              "fullTitle": "convert to centimeters should return error when first parameter null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "d30ac96f-2d78-4307-b7a8-42e73fb4cb89",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter undefined",
              "fullTitle": "convert to centimeters should return error when first parameter undefined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "912d2df3-08e6-4663-bb9b-b25d809a9ff3",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter a negative number",
              "fullTitle": "convert to centimeters should return error when first parameter a negative number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "a146840a-7197-4d7b-a02c-40b36fee11c3",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter string",
              "fullTitle": "convert to centimeters should return error when second parameter string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "4ef667d7-167c-47a9-8255-f868160f3968",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter number",
              "fullTitle": "convert to centimeters should return error when second parameter number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "c6074ba9-c940-4f09-9d5a-5c165561f29a",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter boolean",
              "fullTitle": "convert to centimeters should return error when second parameter boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "dad02b56-3923-4ba9-a2aa-8bffc8a1dca2",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter null",
              "fullTitle": "convert to centimeters should return error when second parameter null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "5661dd9d-a0ea-4994-bfd2-142d3231dca2",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter undefined",
              "fullTitle": "convert to centimeters should return error when second parameter undefined",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "ee3d412f-86c0-4db1-8d0d-9b1b696e0945",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter empty string",
              "fullTitle": "convert to centimeters should return error when second parameter empty string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "43df0cb7-fe62-40f1-acd1-11fe22bd6b70",
              "parentUUID": "ebafe1e1-4d25-4b6c-9d2c-0098c70fab0b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b7db5f36-43ef-48ea-97e4-94fe808603db",
            "c68968ee-1750-4926-96ec-b4752820e766",
            "e22157da-8cf6-489b-b846-fe8cf9c183a7",
            "15b67649-7947-4882-8e91-cf590ba23138",
            "9e7c1fe8-0177-494f-bebe-ce54c0a654db",
            "22db6ff4-29b4-4e4f-b8e0-c160cb8b193c",
            "5035f0e7-88b5-49a1-a5c4-eba03bf096fd",
            "1748196e-c132-4daa-a2e5-53da3f79637e",
            "c80555cf-634c-4c5b-9040-1c693aef89d1",
            "6f953f72-b435-434e-8c27-bc1dd2faec24",
            "c774c54c-3aee-4411-b4fd-44b1184a2d47",
            "091a27c9-c27e-4134-a482-e3fe2b790c55",
            "c7fdfd2b-1640-4aa3-ab3c-5d08178972a1",
            "156209b4-b51e-41b3-b405-744bbd1ade92",
            "d30ac96f-2d78-4307-b7a8-42e73fb4cb89",
            "912d2df3-08e6-4663-bb9b-b25d809a9ff3",
            "a146840a-7197-4d7b-a02c-40b36fee11c3",
            "4ef667d7-167c-47a9-8255-f868160f3968",
            "c6074ba9-c940-4f09-9d5a-5c165561f29a",
            "dad02b56-3923-4ba9-a2aa-8bffc8a1dca2",
            "5661dd9d-a0ea-4994-bfd2-142d3231dca2",
            "ee3d412f-86c0-4db1-8d0d-9b1b696e0945",
            "43df0cb7-fe62-40f1-acd1-11fe22bd6b70"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
          "title": "convert to sea miles",
          "fullFile": "D:\\Web\\Git\\JS-Unit-Testing\\first-task\\src\\LengthConverte.test.js",
          "file": "\\src\\LengthConverte.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 1 when the value 185200 and unit of measurement cm",
              "fullTitle": "convert to sea miles should return 1 when the value 185200 and unit of measurement cm",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "7b46052d-c7df-42fc-b253-4126025e7d53",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 1852 and unit of measurement m",
              "fullTitle": "convert to sea miles should return 1 when the value 1852 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "180cfbd7-4c73-49b6-a297-728f73e41e3c",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 1.151 and unit of measurement miles",
              "fullTitle": "convert to sea miles should return 1 when the value 1.151 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "ddd9701d-7024-4875-ac8d-d0cc4e888114",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 1 and unit of measurement sea miles",
              "fullTitle": "convert to sea miles should return 1 when the value 1 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "89abe630-80d5-4ac2-9d32-c813fad6ffbb",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 72913.386 and unit of measurement inches",
              "fullTitle": "convert to sea miles should return 1 when the value 72913.386 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "c5c1e1c9-cf46-40f4-b5e1-1612fbc06049",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 6076.115 and unit of measurement foot",
              "fullTitle": "convert to sea miles should return 1 when the value 6076.115 and unit of measurement foot",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "763a7b2e-6574-4117-9068-8a15e548625c",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement cm",
              "fullTitle": "convert to sea miles should return 0 when the value 0 and unit of measurement cm",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "aec30338-3254-4683-ab48-45473d92ff63",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement m",
              "fullTitle": "convert to sea miles should return 0 when the value 0 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "47332eac-6c2b-4a08-8080-1a45e3f1d4ef",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement miles",
              "fullTitle": "convert to sea miles should return 0 when the value 0 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "101f47c2-96c9-4324-9b5b-fa31de6e3289",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement sea miles",
              "fullTitle": "convert to sea miles should return 0 when the value 0 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "91e7a06c-9ca0-4d0a-bb2b-c6e8f5a03a5f",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement inches",
              "fullTitle": "convert to sea miles should return 0 when the value 0 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "0e9f363a-27b3-49a4-85da-1f6fd59f6b88",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement foot",
              "fullTitle": "convert to sea miles should return 0 when the value 0 and unit of measurement foot",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "b2854b01-1fd8-4be5-ae95-e11724b48368",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter string",
              "fullTitle": "convert to sea miles should return error when first parameter string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "eab3b5b1-5b5d-4946-8fad-1b4e46be5a44",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter boolean",
              "fullTitle": "convert to sea miles should return error when first parameter boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "5433e7c9-296c-49c6-a340-82058c1aa200",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter null",
              "fullTitle": "convert to sea miles should return error when first parameter null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "da6cec8f-8da2-4587-b0a5-71494807eaaf",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter undefined",
              "fullTitle": "convert to sea miles should return error when first parameter undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "96ee2e0d-241e-459b-a1a4-74d901a7a851",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter a negative number",
              "fullTitle": "convert to sea miles should return error when first parameter a negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "925dcf8e-00ea-4fb5-89fd-8ab92e4615f5",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter string",
              "fullTitle": "convert to sea miles should return error when second parameter string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "cdce7628-99de-4ebd-9521-ee7efd5c0dff",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter number",
              "fullTitle": "convert to sea miles should return error when second parameter number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "2acfe286-cdbd-42a6-bfbc-71456dba92e8",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter boolean",
              "fullTitle": "convert to sea miles should return error when second parameter boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "58e3dc53-7e98-4ccd-8f9b-ab7feca56ae4",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter null",
              "fullTitle": "convert to sea miles should return error when second parameter null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "4408be5b-d8db-4a91-b512-596eb2dbe66b",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter undefined",
              "fullTitle": "convert to sea miles should return error when second parameter undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "894fc504-57b4-4817-934f-a7a4ac56d4bc",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter empty string",
              "fullTitle": "convert to sea miles should return error when second parameter empty string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "758f5696-38df-4855-8e49-b09c039ed7fe",
              "parentUUID": "4aeb9aab-b29d-44d7-a215-d1418581a2ca",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7b46052d-c7df-42fc-b253-4126025e7d53",
            "180cfbd7-4c73-49b6-a297-728f73e41e3c",
            "ddd9701d-7024-4875-ac8d-d0cc4e888114",
            "89abe630-80d5-4ac2-9d32-c813fad6ffbb",
            "c5c1e1c9-cf46-40f4-b5e1-1612fbc06049",
            "763a7b2e-6574-4117-9068-8a15e548625c",
            "aec30338-3254-4683-ab48-45473d92ff63",
            "47332eac-6c2b-4a08-8080-1a45e3f1d4ef",
            "101f47c2-96c9-4324-9b5b-fa31de6e3289",
            "91e7a06c-9ca0-4d0a-bb2b-c6e8f5a03a5f",
            "0e9f363a-27b3-49a4-85da-1f6fd59f6b88",
            "b2854b01-1fd8-4be5-ae95-e11724b48368",
            "eab3b5b1-5b5d-4946-8fad-1b4e46be5a44",
            "5433e7c9-296c-49c6-a340-82058c1aa200",
            "da6cec8f-8da2-4587-b0a5-71494807eaaf",
            "96ee2e0d-241e-459b-a1a4-74d901a7a851",
            "925dcf8e-00ea-4fb5-89fd-8ab92e4615f5",
            "cdce7628-99de-4ebd-9521-ee7efd5c0dff",
            "2acfe286-cdbd-42a6-bfbc-71456dba92e8",
            "58e3dc53-7e98-4ccd-8f9b-ab7feca56ae4",
            "4408be5b-d8db-4a91-b512-596eb2dbe66b",
            "894fc504-57b4-4817-934f-a7a4ac56d4bc",
            "758f5696-38df-4855-8e49-b09c039ed7fe"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
          "title": "convert to foot",
          "fullFile": "D:\\Web\\Git\\JS-Unit-Testing\\first-task\\src\\LengthConverte.test.js",
          "file": "\\src\\LengthConverte.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 1 when the value 30.48 and unit of measurement cm",
              "fullTitle": "convert to foot should return 1 when the value 30.48 and unit of measurement cm",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "fb0cf1e4-c638-46fe-bfa6-251d3406902a",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 0.3048 and unit of measurement m",
              "fullTitle": "convert to foot should return 1 when the value 0.3048 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "471665a1-a9bb-45a2-83b4-7ae86acf219c",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 0.0001893939393939394 and unit of measurement miles",
              "fullTitle": "convert to foot should return 1 when the value 0.0001893939393939394 and unit of measurement miles",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "af5e3649-45af-4948-87d5-b610a999552e",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 0.00016457884684539383 and unit of measurement sea miles",
              "fullTitle": "convert to foot should return 1 when the value 0.00016457884684539383 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "3d12e7ee-9eb6-4215-b8e5-5d24eb69b74d",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 12 and unit of measurement inches",
              "fullTitle": "convert to foot should return 1 when the value 12 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "56bc6016-d77a-4149-b54d-3861c77809e3",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 1 when the value 1 and unit of measurement foot",
              "fullTitle": "convert to foot should return 1 when the value 1 and unit of measurement foot",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(item.value, item.unit), 1);",
              "err": {},
              "uuid": "39860684-cf8c-4f53-aac7-fd2d7fce548b",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement cm",
              "fullTitle": "convert to foot should return 0 when the value 0 and unit of measurement cm",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "7b4d5e35-0e60-4e74-987b-e1cb79bb41ab",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement m",
              "fullTitle": "convert to foot should return 0 when the value 0 and unit of measurement m",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "4e8763f4-790d-44e9-9ab1-5d44094fe855",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement miles",
              "fullTitle": "convert to foot should return 0 when the value 0 and unit of measurement miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "39a64061-93b6-4787-a06d-048f5ae1620d",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement sea miles",
              "fullTitle": "convert to foot should return 0 when the value 0 and unit of measurement sea miles",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "bccc8bec-c16c-411f-869d-75439bc9c5b8",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement inches",
              "fullTitle": "convert to foot should return 0 when the value 0 and unit of measurement inches",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "5baa3e47-6f59-439e-a212-bd0d76523cf6",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 0 when the value 0 and unit of measurement foot",
              "fullTitle": "convert to foot should return 0 when the value 0 and unit of measurement foot",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(func(0, item.unit), 0);",
              "err": {},
              "uuid": "c4b09977-7a8d-45eb-ba91-062e27aa4d62",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter string",
              "fullTitle": "convert to foot should return error when first parameter string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "0c05ab6a-572c-4c46-be71-3267511592d1",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter boolean",
              "fullTitle": "convert to foot should return error when first parameter boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "824de515-18b9-4a22-9aeb-7c318fb1a8e1",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter null",
              "fullTitle": "convert to foot should return error when first parameter null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "da830d50-7c15-4b44-8d3f-fe8860d77217",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter undefined",
              "fullTitle": "convert to foot should return error when first parameter undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "fef566b8-c8b1-4026-a544-8c7d2c9560b8",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when first parameter a negative number",
              "fullTitle": "convert to foot should return error when first parameter a negative number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(item, 'cm');\n}, 'error');",
              "err": {},
              "uuid": "9d34cd91-ac67-4067-8113-925d2fa2c34a",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter string",
              "fullTitle": "convert to foot should return error when second parameter string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "daf993f8-7d0d-44a4-aa7d-a7d37440fdb8",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter number",
              "fullTitle": "convert to foot should return error when second parameter number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "158f6811-9d92-4b1d-b2d4-378048af0e8d",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter boolean",
              "fullTitle": "convert to foot should return error when second parameter boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "99f5a065-f1df-4a29-ab01-b8ab6760d5fa",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter null",
              "fullTitle": "convert to foot should return error when second parameter null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "298f3fe9-65a7-41f0-8ac3-269a9a412be1",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter undefined",
              "fullTitle": "convert to foot should return error when second parameter undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "9f19d916-971a-4a9e-b666-2b94d7bbf598",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return error when second parameter empty string",
              "fullTitle": "convert to foot should return error when second parameter empty string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.throws(() => {\n  func(1, item);\n}, 'error');",
              "err": {},
              "uuid": "7988aebc-10cb-40b4-9729-67b4290e92d7",
              "parentUUID": "36c2e307-2b54-45e3-8f95-497cb40d39ee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fb0cf1e4-c638-46fe-bfa6-251d3406902a",
            "471665a1-a9bb-45a2-83b4-7ae86acf219c",
            "af5e3649-45af-4948-87d5-b610a999552e",
            "3d12e7ee-9eb6-4215-b8e5-5d24eb69b74d",
            "56bc6016-d77a-4149-b54d-3861c77809e3",
            "39860684-cf8c-4f53-aac7-fd2d7fce548b",
            "7b4d5e35-0e60-4e74-987b-e1cb79bb41ab",
            "4e8763f4-790d-44e9-9ab1-5d44094fe855",
            "39a64061-93b6-4787-a06d-048f5ae1620d",
            "bccc8bec-c16c-411f-869d-75439bc9c5b8",
            "5baa3e47-6f59-439e-a212-bd0d76523cf6",
            "c4b09977-7a8d-45eb-ba91-062e27aa4d62",
            "0c05ab6a-572c-4c46-be71-3267511592d1",
            "824de515-18b9-4a22-9aeb-7c318fb1a8e1",
            "da830d50-7c15-4b44-8d3f-fe8860d77217",
            "fef566b8-c8b1-4026-a544-8c7d2c9560b8",
            "9d34cd91-ac67-4067-8113-925d2fa2c34a",
            "daf993f8-7d0d-44a4-aa7d-a7d37440fdb8",
            "158f6811-9d92-4b1d-b2d4-378048af0e8d",
            "99f5a065-f1df-4a29-ab01-b8ab6760d5fa",
            "298f3fe9-65a7-41f0-8ac3-269a9a412be1",
            "9f19d916-971a-4a9e-b666-2b94d7bbf598",
            "7988aebc-10cb-40b4-9729-67b4290e92d7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "227b2464-67ae-47b0-9b7b-2c030866a3c6",
          "title": "util type",
          "fullFile": "D:\\Web\\Git\\JS-Unit-Testing\\first-task\\src\\utils.test.js",
          "file": "\\src\\utils.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return string",
              "fullTitle": "util type should return string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(type('1'), 'string');",
              "err": {},
              "uuid": "bf960779-26f6-4c13-95ac-a083dfda5739",
              "parentUUID": "227b2464-67ae-47b0-9b7b-2c030866a3c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return number",
              "fullTitle": "util type should return number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(type(1), 'number');",
              "err": {},
              "uuid": "2e8e1aeb-6e9a-4b28-90e9-bae1bb9f1817",
              "parentUUID": "227b2464-67ae-47b0-9b7b-2c030866a3c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return boolean",
              "fullTitle": "util type should return boolean",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(type(true), 'boolean');",
              "err": {},
              "uuid": "373b2074-aba2-4325-b25d-2c62e58a9d5b",
              "parentUUID": "227b2464-67ae-47b0-9b7b-2c030866a3c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return null",
              "fullTitle": "util type should return null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(type(null), 'null');",
              "err": {},
              "uuid": "5b00d864-ffe6-4080-b8e8-71d270fa05f7",
              "parentUUID": "227b2464-67ae-47b0-9b7b-2c030866a3c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return undefined",
              "fullTitle": "util type should return undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(type(undefined), 'undefined');",
              "err": {},
              "uuid": "e1fb4075-a622-4b91-8a3b-7a819cecb47f",
              "parentUUID": "227b2464-67ae-47b0-9b7b-2c030866a3c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return array",
              "fullTitle": "util type should return array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(type([]), 'array');",
              "err": {},
              "uuid": "73d03863-6b9c-48a5-9767-836026d61d32",
              "parentUUID": "227b2464-67ae-47b0-9b7b-2c030866a3c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return object",
              "fullTitle": "util type should return object",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(type({}), 'object');",
              "err": {},
              "uuid": "7a925270-7942-4b44-a2bf-1c9eb32dea83",
              "parentUUID": "227b2464-67ae-47b0-9b7b-2c030866a3c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return function",
              "fullTitle": "util type should return function",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "assert.equal(type(() => {}), 'function');",
              "err": {},
              "uuid": "6c002fae-15dc-4ca5-bb48-b9395321f3d4",
              "parentUUID": "227b2464-67ae-47b0-9b7b-2c030866a3c6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bf960779-26f6-4c13-95ac-a083dfda5739",
            "2e8e1aeb-6e9a-4b28-90e9-bae1bb9f1817",
            "373b2074-aba2-4325-b25d-2c62e58a9d5b",
            "5b00d864-ffe6-4080-b8e8-71d270fa05f7",
            "e1fb4075-a622-4b91-8a3b-7a819cecb47f",
            "73d03863-6b9c-48a5-9767-836026d61d32",
            "7a925270-7942-4b44-a2bf-1c9eb32dea83",
            "6c002fae-15dc-4ca5-bb48-b9395321f3d4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "useInlineDiffs": false
      },
      "version": "4.0.1"
    },
    "marge": {
      "options": null,
      "version": "4.0.1"
    }
  }
}